#! /bin/bash
set -euo pipefail

#
# Utility functions
#

show_error() {
  local red=$'\033[0;91m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${red}${*:2}${nc}" 1>&2
  else
    echo -e "${red}${*}${nc}" 1>&2
  fi
}
export -f show_error

show_info() {
  local green=$'\033[0;92m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${green}${*:2}${nc}" 1>&2
  else
    echo -e "${green}${*}${nc}" 1>&2
  fi
}
export -f show_info

show_warning() {
  local yellow=$'\033[0;93m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${yellow}${*:2}${nc}" 1>&2
  else
    echo -e "${yellow}${*}${nc}" 1>&2
  fi
}
export -f show_warning

show_question() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${blue}${*:2}${nc}" 1>&2
  else
    echo -e "${blue}${*}${nc}" 1>&2
  fi
}
export -f show_question

ask_question() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  local var
  read -r -p "${blue}$*${nc} " var
  echo "${var}"
}
export -f ask_question

ask_secret() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  local var
  stty -echo echonl
  read -r -p "${blue}$*${nc} " var
  stty echo -echonl
  echo "${var}"
}
export -f ask_secret

show_success() {
  local purple=$'\033[0;95m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${purple}${*:2}${nc}" 1>&2
  else
    echo -e "${purple}${*}${nc}" 1>&2
  fi
}
export -f show_success

show_header() {
  local cyan=$'\033[0;96m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${cyan}${*:2}${nc}" 1>&2
  else
    echo -e "${cyan}${*}${nc}" 1>&2
  fi
}
export -f show_header

show_listitem() {
  local white=$'\033[0;97m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${white}${*:2}${nc}" 1>&2
  else
    echo -e "${white}${*}${nc}" 1>&2
  fi
}
export -f show_listitem

check_command() {
  local package
  local missing=()
  for package in "${@}"; do
    if ! command -v "${package}" > /dev/null; then
      missing+=("${package}")
    fi
  done
  if [ ${#missing[@]} -eq 0 ]; then
    return 0
  else
    show_error "MISSING: ${missing[*]@Q} not installed."
    return 1
  fi
}
export -f check_command

! check_command git podman sed && exit 3

#
# Functions
#

function get_latest_tag {
  git ls-remote --sort='version:refname' --tags "${1}" |
    tail -n 1 |
    cut -d"	" -f2 |
    cut -d "/" -f3
}

function build_update {
  # Update README and build script.
  sed -i \
    -e "s/^IOSEVKA=${IOSEVKA_CURRENT}/IOSEVKA=${IOSEVKA_LATEST}/g" \
    -e "s/^NERDFONT=${NERDFONT_CURRENT}/NERDFONT=${NERDFONT_LATEST}/g" "${ROOT}"/build
  sed -i \
    -e "s/^IOSEVKA=${IOSEVKA_CURRENT}/IOSEVKA=${IOSEVKA_LATEST}/g" \
    -e "s/^NERDFONT=${NERDFONT_CURRENT}/NERDFONT=${NERDFONT_LATEST}/g" "${ROOT}"/README.md

  # Download/compile requisite podman images.
  podman build -t jambo-build "${ROOT}"

  # Run build script.
  mkdir -p "${ROOT}/${DEST}"
  podman run -it --rm --network host -v "${ROOT}/${DEST}:/home/${DEST}:Z" localhost/jambo-build:latest
}

# Put files in place and commit changes.
function commit_changes {
  pushd "${ROOT}" > /dev/null

  if [[ "$(git log -1 --pretty=%B)" = "compile and commit fonts" ]]; then
    git reset HEAD~1
  fi

  mv fonts "fonts-$(date +%Y%m%d-%H%M%S)"
  mv "${DEST}/jambo-mono" fonts
  rmdir "${DEST}"

  local msg=
  if ! [ "${IOSEVKA_CURRENT}" = "${IOSEVKA_LATEST}" ]; then
    msg="${msg:-} iosevka ${IOSEVKA_LATEST},"
  fi
  if ! [ "${NERDFONT_CURRENT}" = "${NERDFONT_LATEST}" ]; then
    msg="${msg:-} nerd-fonts ${NERDFONT_LATEST},"
  fi
  git add README.md build
  git commit -m "update:${msg::-1}"

  git add fonts
  git commit -m "compile and commit fonts"

  popd > /dev/null
}

#
# Globals
#

! check_command git podman && exit 3

ROOT="$(readlink -f "$(dirname "${0}")")"
DEST=dest

# Get release versions for iosevka and nerd-fonts.
IOSEVKA_LATEST="$(get_latest_tag https://github.com/be5invis/Iosevka.git)"
NERDFONT_LATEST="$(get_latest_tag https://github.com/ryanoasis/nerd-fonts.git)"

IOSEVKA_CURRENT="$(sed -n "s/^IOSEVKA=\(.*\)/\1/p" "${ROOT}"/build)"
NERDFONT_CURRENT="$(sed -n "s/^NERDFONT=\(.*\)/\1/p" "${ROOT}"/build)"

# Check whether remote and local latest tags match. If no, exit. If yes, prompt
# for rebuilding font files.
if [ "${IOSEVKA_CURRENT}" = "${IOSEVKA_LATEST}" ] &&
   [ "${NERDFONT_CURRENT}" = "${NERDFONT_LATEST}" ]; then
  show_success "No updates found."
  exit
else
  if ! [ "${IOSEVKA_CURRENT}" = "${IOSEVKA_LATEST}" ]; then
    show_info "Iosevka: ${IOSEVKA_CURRENT} -> ${IOSEVKA_LATEST}"
  fi
  if ! [ "${NERDFONT_CURRENT}" = "${NERDFONT_LATEST}" ]; then
    show_info "Nerd Fonts: ${NERDFONT_CURRENT} -> ${NERDFONT_LATEST}"
  fi
  REPLY="$(ask_question "Updates found. Rebuild fonts? (y/N)")"
  if [[ "${REPLY}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    build_update
    commit_changes
  fi
fi
